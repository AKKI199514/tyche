# Travis CI (MIT License) configuration file for WordPress theme wd_s.
# @link https://travis-ci.org/

# For use with the WordPress theme wd_s.
# @link https://github.com/WebDevStudios/wd_s

# Ditch sudo and use containers.
# @link http://docs.travis-ci.com/user/migrating-from-legacy/#Why-migrate-to-container-based-infrastructure%3F
# @link http://docs.travis-ci.com/user/workers/container-based-infrastructure/#Routing-your-build-to-container-based-infrastructure
sudo: false

# Declare project language.
# @link http://about.travis-ci.org/docs/user/languages/php/
language: php

# Declare versions of PHP to use. Use one decimal max.
# @link http://docs.travis-ci.com/user/build-configuration/
matrix:
    fast_finish: true

    include:
        - php: '5.6'
        - php: '7.0'
        - php: '7.1'

# Use this to prepare the system to install prerequisites or dependencies.
# e.g. sudo apt-get update.
# Failures in this section will result in build status 'errored'.
# before_install:

# Use this to prepare your build for testing.
# e.g. copy database configurations, environment variables, etc.
# Failures in this section will result in build status 'errored'.
before_script:
  - export PHPCS_DIR=/tmp/phpcs
  - export SNIFFS_DIR=/tmp/sniffs
  # Install CodeSniffer for WordPress Coding Standards checks.
  - git clone -b 2.9 --depth 1 https://github.com/squizlabs/PHP_CodeSniffer.git $PHPCS_DIR
  # Install WordPress Coding Standards.
  - git clone -b master --depth 1 https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards.git $SNIFFS_DIR
  # Install PHP Compatibility sniffs.
  - git clone -b master --depth 1 https://github.com/wimg/PHPCompatibility.git $SNIFFS_DIR/PHPCompatibility
  # Set install path for PHPCS sniffs.
  # @link https://github.com/squizlabs/PHP_CodeSniffer/blob/4237c2fc98cc838730b76ee9cee316f99286a2a7/CodeSniffer.php#L1941
  - $PHPCS_DIR/scripts/phpcs --config-set installed_paths $SNIFFS_DIR
  # After CodeSniffer install you should refresh your path.
  - phpenv rehash
  # Install JSCS: JavaScript Code Style checker.
  # @link http://jscs.info/
  - npm install -g jscs
  # Install JSHint, a JavaScript Code Quality Tool.
  # @link http://jshint.com/docs/
  - npm install -g jshint
  # Pull in the WP Core jshint rules.
  - wget https://develop.svn.wordpress.org/trunk/.jshintrc

# Run test script commands.
# Default is specific to project language.
# All commands must exit with code 0 on success. Anything else is considered failure.
script:
  - mkdir -p build/logs
  # Search for PHP syntax errors.
  - find -L . -name '*.php' -print0 | xargs -0 -n 1 -P 4 php -l
  # Run the plugin through JSHint.
  #- jshint ./assets/js/*.js
  # Run the plugin through JavaScript Code Style checker.
  #- jscs ./assets/js/*.js

  - $PHPCS_DIR/scripts/phpcs -p -s -v -n ./*.php --standard=./phpcs.ruleset.xml --extensions=php
  - $PHPCS_DIR/scripts/phpcs -p -s -v -n ./**/*.php --standard=./phpcs.ruleset.xml --extensions=php
  - $PHPCS_DIR/scripts/phpcs -p -s -v -n ./**/**/*.php --standard=./phpcs.ruleset.xml --extensions=php
  - $PHPCS_DIR/scripts/phpcs -p -s -v -n ./**/**/**/*.php --standard=./phpcs.ruleset.xml --extensions=php
  - $PHPCS_DIR/scripts/phpcs -p -s -v -n ./**/**/**/**/*.php --standard=./phpcs.ruleset.xml --extensions=php
  - $PHPCS_DIR/scripts/phpcs -p -s -v -n ./**/**/**/**/**/*.php --standard=./phpcs.ruleset.xml --extensions=php

# Receive notifications for build results.
# @link http://docs.travis-ci.com/user/notifications/#Email-notifications
notifications:
  email: false

# Caching
# @link https://docs.travis-ci.com/user/caching/
cache:
  directories:
    - node_modules